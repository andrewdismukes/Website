<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Methods on Strings as Factors</title>
    <link>http://www.dismukes.io/categories/methods/</link>
    <description>Recent content in Methods on Strings as Factors</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>youremail@domain.com (Some Person)</managingEditor>
    <webMaster>youremail@domain.com (Some Person)</webMaster>
    <lastBuildDate>Thu, 09 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.dismukes.io/categories/methods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I made an App!</title>
      <link>http://www.dismukes.io/post/i-made-an-app/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://www.dismukes.io/post/i-made-an-app/</guid>
      <description>It wasn’t that hard to do. I’ll have a full tutorial coming, and perhaps a more developed and polished interface, but the bulk of the project is embedded below. It’s written using Shiny in R. I’ve wanted to get more into interactive visualization for some time and just haven’t had the time or energy to try to learn. In academia you don’t really have a call (at present) to develop these interactive visualization skills for work - journal articles don’t require interactives.</description>
    </item>
    
    <item>
      <title>Twitter Data</title>
      <link>http://www.dismukes.io/post/twitter-data/</link>
      <pubDate>Fri, 21 Jul 2017 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://www.dismukes.io/post/twitter-data/</guid>
      <description>Update November 2018: You now need to apply for a developer account to get a twitter API token.
I’m not very good with words.
At least from an analytical sense - I’m more comfortable with numbers. I say this not to criticize qualitative work, but to be up front with my limitations. Lately, however, I’ve discovered the twitter API, and it’s fun to play with. This is a lark, but it’s pushed me to learn a few new tricks in R, and to work with packages I haven’t used before, so a learning-lark.</description>
    </item>
    
    <item>
      <title>Git for RR workflow, part one</title>
      <link>http://www.dismukes.io/post/git-for-rr-workflow-part-one/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://www.dismukes.io/post/git-for-rr-workflow-part-one/</guid>
      <description>The first step in a reproducible research workflow starts with Version Control. If you are unfamiliar with Version Control Systems, I’ll provide a brief overview of git. If you are already familiar with git, skip this. There are other programs that accomplish similar ends, but I’m most familiar with git and github, so I’m going to limit my discussion to those tools.
Git was originally created to track development of the Linux kernel.</description>
    </item>
    
    <item>
      <title>Reproducible Research</title>
      <link>http://www.dismukes.io/post/reproducible-research/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://www.dismukes.io/post/reproducible-research/</guid>
      <description>This is the first post in a short series I am going to do on workflow and reproducible research. I’m going to detail the process I use on a pretty granular level, because some of the tools (version control and git, Markdown, knitting in R, etc.) may not be familiar, and because I did a lot of troubleshooting along the way. But first, it’s important to explain my motivation to learn the tools that make up this workflow.</description>
    </item>
    
  </channel>
</rss>